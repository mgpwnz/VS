#!/bin/bash

# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ ===
apt update
apt install -y python3-pip
pip3 install pytz requests

# === –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Telegram –±–æ—Ç–∞ ===
read -p "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Telegram –±–æ—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å (Y/N)? " use_telegram

if [[ "$use_telegram" == "Y" || "$use_telegram" == "y" ]]; then
    read -p "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π TELEGRAM_BOT_TOKEN: " TELEGRAM_BOT_TOKEN
    read -p "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π CHAT_ID: " CHAT_ID
else
    TELEGRAM_BOT_TOKEN=""
    CHAT_ID=""
fi

# –ó–∞–ø–∏—Ç –Ω–∞ –≤–∫–ª—é—á–µ–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
read -p "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–ª—é—á–∞—Ç–∏ IP –∞–¥—Ä–µ—Å—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö (Y/N)? " include_ip

# –ó–∞–ø–∏—Ç –Ω–∞ —á–∞—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö)
read -p "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ (—Ö–≤–∏–ª–∏–Ω–∏, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 15): " timer_interval
timer_interval=${timer_interval:-15}  # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 15 —Ö–≤–∏–ª–∏–Ω

# –®–ª—è—Ö –¥–æ Python-—Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_PATH="$HOME/check_shardeum_status.py"
LOG_PATH="$HOME/shardeum_monitor.log"  # –®–ª—è—Ö –¥–æ –ª–æ–≥-—Ñ–∞–π–ª—É –≤ –¥–æ–º–∞—à–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

# –°—Ç–≤–æ—Ä—é—î–º–æ Python-—Å–∫—Ä–∏–ø—Ç
cat << EOF > $SCRIPT_PATH
import subprocess
import pytz
from datetime import datetime
import requests
import os
import socket

TELEGRAM_BOT_TOKEN = "$TELEGRAM_BOT_TOKEN"
CHAT_ID = "$CHAT_ID"
LOG_PATH = "$LOG_PATH"
INCLUDE_IP = "$include_ip" == "Y"

# –û—Ç—Ä–∏–º—É—î–º–æ hostname —ñ IP –∞–¥—Ä–µ—Å–∏
HOSTNAME = socket.gethostname()
SERVER_IP = subprocess.getoutput("hostname -I | awk '{print \$1}'")

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
STATUSES = {
    "offline": "‚ùå offline",
    "waiting-for-network": "‚è≥ waiting-for-network",
    "standby": "üü¢ standby",
    "active": "üîµ active"
}

def log_status(status):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É —á–∞—Å—É —Ç–∞ —Å—Ç–∞—Ç—É—Å—É –≤ –ª–æ–≥."""
    timezone = pytz.timezone('Europe/Kiev')  # –ó–∞–¥–∞—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
    current_time = datetime.now(timezone).strftime('%Y-%m-%d %H:%M:%S')

    log_message = f"{current_time} [{HOSTNAME}][{SERVER_IP}] Shardeum operator status: {status}\n"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ª–æ–≥-—Ñ–∞–π–ª, —ñ —è–∫—â–æ –Ω—ñ, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
    if not os.path.exists(LOG_PATH):
        open(LOG_PATH, 'w').close()  # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î

    try:
        # –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—ñ —Ñ–∞–π–ª–∏
        with open(LOG_PATH, "a") as log_file:
            log_file.write(log_message)
    except Exception as e:
        print(f"Error writing to log file: {e}")  # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
    
    # –Ø–∫—â–æ –≤–∫–ª—é—á–µ–Ω–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å
    if TELEGRAM_BOT_TOKEN and CHAT_ID:
        send_telegram_message(status)

def send_telegram_message(status):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram."""
    if INCLUDE_IP:
        message = f"{HOSTNAME} {SERVER_IP} {status}"
    else:
        message = f"{HOSTNAME} {status}"

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": message
    }
    try:
        response = requests.post(url, data=data)
        if response.status_code != 200:
            log_status(f"Failed to send message: {response.text}")
    except Exception as e:
        log_status(f"Error sending Telegram message: {e}")

def is_container_running(container_name):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä."""
    try:
        result = subprocess.run(
            ["docker", "inspect", "-f", "{{.State.Running}}", container_name],
            capture_output=True,
            text=True
        )
        return result.stdout.strip() == "true"
    except subprocess.CalledProcessError as e:
        log_status(f"Error checking container status: {e}")
        return False

def start_container(container_name):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
    try:
        result = subprocess.run(
            ["docker", "start", container_name],
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            log_status(f"Container {container_name} started successfully!")
        else:
            log_status(f"Failed to start container: {result.stderr}")
    except subprocess.CalledProcessError as e:
        log_status(f"Error starting container: {e}")

def check_operator_status():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
    try:
        result = subprocess.run(
            ["docker", "exec", "shardeum-dashboard", "operator-cli", "status"],
            capture_output=True,
            text=True
        )
        output = result.stdout
        return output
    except subprocess.CalledProcessError as e:
        log_status(f"Error executing status command: {e}")
        return ""

def check_status_and_restart_operator():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –π–æ–≥–æ –∑–∞–ø—É—Å–∫—É, —è–∫—â–æ –≤—ñ–Ω –∑—É–ø–∏–Ω–µ–Ω–∏–π."""
    output = check_operator_status()
    
    # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞—Ç—É—Å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É
    previous_status = None

    for line in output.splitlines():
        if "state" in line:
            current_status = line.split(":", 1)[1].strip()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å
            if current_status in STATUSES:
                current_status_display = STATUSES[current_status]  # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º
            else:
                current_status_display = current_status  # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π, –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î

            if current_status != previous_status:  # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è, –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                previous_status = current_status
                log_status(f"State changed to '{current_status_display}'")
            else:
                log_status(f"State is '{current_status_display}'")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É

            if current_status == "stopped":
                log_status("State is 'stopped', starting the operator...")
                restart_operator()
                return False

    gui_status_result = subprocess.run(
        ["docker", "exec", "shardeum-dashboard", "operator-cli", "gui", "status"],
        capture_output=True,
        text=True
    )
    gui_output = gui_status_result.stdout
    if "operator gui not running!" in gui_output:
        log_status("GUI is not running, starting the GUI...")
        start_gui()

    return True

def restart_operator():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
    try:
        result = subprocess.run(
            ["docker", "exec", "shardeum-dashboard", "operator-cli", "start"],
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            log_status("Operator started successfully!")
        else:
            log_status(f"Failed to start the operator: {result.stderr}")
    except subprocess.CalledProcessError as e:
        log_status(f"Error executing start command: {e}")

def start_gui():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É GUI."""
    try:
        gui_result = subprocess.run(
            ["docker", "exec", "shardeum-dashboard", "operator-cli", "gui", "start"],
            capture_output=True,
            text=True
        )
        if gui_result.returncode == 0:
            log_status("GUI started successfully!")
        else:
            log_status(f"Failed to start the GUI: {gui_result.stderr}")
    except subprocess.CalledProcessError as e:
        log_status(f"Error executing GUI start command: {e}")

def main():
    container_name = "shardeum-dashboard"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π
    if not is_container_running(container_name):
        log_status(f"Container {container_name} is not running. Starting it...")
        start_container(container_name)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    check_status_and_restart_operator()

# –í–∏–∫–ª–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
if __name__ == "__main__":
    main()
EOF

# –ó–∞–¥–∞—î–º–æ –≤–∏–∫–æ–Ω—É–≤–∞–Ω—ñ –ø—Ä–∞–≤–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
chmod +x $SCRIPT_PATH

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É ===

SERVICE_PATH="/etc/systemd/system/check_shardeum_status.service"

# –°—Ç–≤–æ—Ä—é—î–º–æ systemd —Å–µ—Ä–≤—ñ—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞
cat << EOF > $SERVICE_PATH
[Unit]
Description=Check Shardeum Container and Operator Status
After=docker.service
Requires=docker.service

[Service]
Type=simple
ExecStart=/usr/bin/python3 $SCRIPT_PATH
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ ===
TIMER_PATH="/etc/systemd/system/check_shardeum_status.timer"

cat << EOF > $TIMER_PATH
[Unit]
Description=Timer for Check Shardeum Status

[Timer]
OnBootSec=5min
OnUnitActiveSec=${timer_interval}min
Unit=check_shardeum_status.service

[Install]
WantedBy=timers.target
EOF

# === –ó–∞–ø—É—Å–∫ —Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Ç–∞ —Ç–∞–π–º–µ—Ä–∞ ===
systemctl daemon-reload
systemctl enable check_shardeum_status.service
systemctl enable check_shardeum_status.timer
systemctl start check_shardeum_status.timer

# –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—É —Ç–∞ —Ç–∞–π–º–µ—Ä–∞
echo "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—É:"
sudo systemctl status check_shardeum_status.service
SERVICE_STATUS=$?

echo "–°—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞:"
sudo systemctl status check_shardeum_status.timer
TIMER_STATUS=$?

if [ $SERVICE_STATUS -ne 0 ] || [ $TIMER_STATUS -ne 0 ]; then
    echo "–°–µ—Ä–≤—ñ—Å –∞–±–æ —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç."
else
    echo "–°–∫—Ä–∏–ø—Ç —Ç–∞ —Å–µ—Ä–≤—ñ—Å —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ."
fi
