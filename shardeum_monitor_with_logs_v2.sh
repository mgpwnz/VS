#!/bin/bash

# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ ===
apt update
apt install -y python3-pip curl
pip3 install pytz requests

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Telegram ===
function test_telegram() {
    local message="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Shardeum Monitor"
    local url="https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"
    
    response=$(curl -s -X POST "$url" -d "chat_id=$CHAT_ID&text=$message")
    
    if [[ "$response" == *'"ok":true'* ]]; then
        echo "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ."
        return 0
    else
        echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        return 1
    fi
}

# === –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Telegram –±–æ—Ç–∞ ===
read -p "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Telegram –±–æ—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å (Y/N)? " use_telegram

if [[ "$use_telegram" == "Y" || "$use_telegram" == "y" ]]; then
    while true; do
        read -p "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π TELEGRAM_BOT_TOKEN: " TELEGRAM_BOT_TOKEN
        read -p "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π CHAT_ID: " CHAT_ID
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–¥–∞—î—Ç—å—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if test_telegram; then
            break
        else
            echo "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ."
        fi
    done
else
    TELEGRAM_BOT_TOKEN=""
    CHAT_ID=""
fi

# –ó–∞–ø–∏—Ç –Ω–∞ –≤–∫–ª—é—á–µ–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
read -p "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–ª—é—á–∞—Ç–∏ IP –∞–¥—Ä–µ—Å—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö (Y/N)? " include_ip

# –®–ª—è—Ö –¥–æ Python-—Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_PATH="/root/check_shardeum_status.py"
LOG_PATH="/root/shardeum_monitor.log"  # –®–ª—è—Ö –¥–æ –ª–æ–≥-—Ñ–∞–π–ª—É –≤ –¥–æ–º–∞—à–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

# –°—Ç–≤–æ—Ä—é—î–º–æ Python-—Å–∫—Ä–∏–ø—Ç
cat << EOF > "$SCRIPT_PATH"
import subprocess
import pytz
from datetime import datetime
import requests
import os
import socket
import time

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram
TELEGRAM_BOT_TOKEN = "$TELEGRAM_BOT_TOKEN"
CHAT_ID = "$CHAT_ID"
LOG_PATH = "$LOG_PATH"
INCLUDE_IP = "$include_ip" == "Y"

# –û—Ç—Ä–∏–º—É—î–º–æ hostname —ñ IP –∞–¥—Ä–µ—Å–∏
HOSTNAME = socket.gethostname()
SERVER_IP = subprocess.getoutput("hostname -I | awk '{print \$1}'")

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
STATUSES = {
    "stopped": "‚ùå stopped",
    "waiting-for-network": "‚è≥ waiting-for-network",
    "standby": "üü¢ standby",
    "active": "üîµ active"  
}

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
LAST_STATUS_FILE = "/tmp/shardeum_last_status.txt"

def load_last_status():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞—Ç—É—Å –∑ —Ñ–∞–π–ª—É."""
    if os.path.exists(LAST_STATUS_FILE):
        with open(LAST_STATUS_FILE, "r") as file:
            return file.read().strip()
    return None

def save_last_status(status):
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞—Ç—É—Å —É —Ñ–∞–π–ª."""
    with open(LAST_STATUS_FILE, "w") as file:
        file.write(status)

def log_status(status, prev_status=None):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É —á–∞—Å—É —Ç–∞ —Å—Ç–∞—Ç—É—Å—É –≤ –ª–æ–≥ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram."""
    timezone = pytz.timezone('Europe/Kiev')  # –ó–∞–¥–∞—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
    current_time = datetime.now(timezone).strftime('%Y-%m-%d %H:%M:%S')

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    status_mapping = STATUSES

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è hostname —Ç–∞ IP, —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–æ
    prefix = f"{HOSTNAME} {SERVER_IP} " if INCLUDE_IP else f"{HOSTNAME} "

    # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    message = ""

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞—Ç—É—Å
    if prev_status and prev_status in status_mapping:
        current_status_display = status_mapping.get(status, "‚ùì unknown")
        prev_status_display = status_mapping.get(prev_status, "‚ùì unknown")
        message = f"{prefix}State changed from {prev_status_display} to {current_status_display}"
    else:
        current_status_display = status_mapping.get(status, "‚ùì unknown")
        message = f"{prefix}{current_status_display}"

    # –ó–∞–ø–∏—Å —É –ª–æ–≥-—Ñ–∞–π–ª
    with open(LOG_PATH, "a") as log_file:
        log_file.write(f"{current_time} {message}\n")

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if prev_status and prev_status in status_mapping:
        send_status_change_message(status, prev_status)
    else:
        send_default_message(status)

def send_status_change_message(current_status, previous_status):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —É Telegram."""
    prefix = f"{HOSTNAME} {SERVER_IP} " if INCLUDE_IP else f"{HOSTNAME} "
    
    current_status_display = STATUSES.get(current_status, "‚ùì unknown")
    previous_status_display = STATUSES.get(previous_status, "‚ùì unknown")

    message = f"{prefix}State changed from {previous_status_display} to {current_status_display}"
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": message
    }
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Error sending message: {e}")

def send_default_message(current_status):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram."""
    prefix = f"{HOSTNAME} {SERVER_IP} " if INCLUDE_IP else f"{HOSTNAME} "

    message = f"{prefix}{STATUSES[current_status]}"

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": message
    }
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Error sending message: {e}")

def check_container_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Shardeum."""
    try:
        result = subprocess.run(["docker", "exec", "shardeum-dashboard", "operator-cli", "status"], capture_output=True, text=True)
        return result.stdout.strip()
    except Exception as e:
        print(f"Error checking container status: {e}")
        return "unknown"

def start_validator():
    """–ó–∞–ø—É—Å–∫–∞—î –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä, —è–∫—â–æ –≤—ñ–Ω –∑—É–ø–∏–Ω–µ–Ω–∏–π."""
    subprocess.run(["docker", "exec", "shardeum-dashboard", "operator-cli", "start"])

def check_gui_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å GUI Shardeum."""
    try:
        result = subprocess.run(["docker", "exec", "shardeum-dashboard", "operator-cli", "gui", "status"], capture_output=True, text=True)
        return result.stdout.strip()
    except Exception as e:
        print(f"Error checking GUI status: {e}")
        return "unknown"

def start_gui():
    """–ó–∞–ø—É—Å–∫–∞—î GUI, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –æ–Ω–ª–∞–π–Ω."""
    subprocess.run(["docker", "exec", "shardeum-dashboard", "operator-cli", "gui", "start"])

# –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
def main():
    last_status = load_last_status()
    
    while True:
        current_status = check_container_status()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä, —è–∫—â–æ –≤—ñ–Ω –∑—É–ø–∏–Ω–µ–Ω–∏–π
        if current_status == "stopped":
            print("Validator is stopped. Starting...")
            start_validator()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å GUI
        gui_status = check_gui_status()
        if gui_status != "online":
            print("GUI is not online. Starting GUI...")
            start_gui()

        if current_status != last_status:
            log_status(current_status, last_status)
            save_last_status(current_status)

        # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        time.sleep(5)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    main()
EOF

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è systemd ===
# –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Ä–≤—ñ—Å systemd
cat << EOF > /etc/systemd/system/shardeum_monitor.service
[Unit]
Description=Shardeum Monitor
After=docker.service
Requires=docker.service

[Service]
ExecStart=/usr/bin/python3 $SCRIPT_PATH
Restart=always
User=root

[Install]
WantedBy=multi-user.target
EOF

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–π–º–µ—Ä systemd
cat << EOF > /etc/systemd/system/shardeum_monitor.timer
[Unit]
Description=Runs Shardeum Monitor every time the timer is triggered

[Timer]
OnActiveSec=0
OnUnitActiveSec=1min
Unit=shardeum_monitor.service

[Install]
WantedBy=timers.target
EOF

# === –ê–∫—Ç–∏–≤—É—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä ===
systemctl daemon-reload
systemctl enable shardeum_monitor.timer
systemctl start shardeum_monitor.timer

echo "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. –¢–∞–π–º–µ—Ä —Å–∏—Å—Ç–µ–º–∏ Shardeum Monitor –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ."
