#!/bin/bash

# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ ===
apt update
apt install -y python3-pip curl
pip3 install pytz requests

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Telegram ===
function test_telegram() {
    local message="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Shardeum Monitor"
    local url="https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"
    
    response=$(curl -s -X POST "$url" -d "chat_id=$CHAT_ID&text=$message")
    
    if [[ "$response" == *'"ok":true'* ]]; then
        echo "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ."
        return 0
    else
        echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        return 1
    fi
}

# === –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Telegram –±–æ—Ç–∞ ===
read -p "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Telegram –±–æ—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å (Y/N)? " use_telegram

if [[ "$use_telegram" == "Y" || "$use_telegram" == "y" ]]; then
    while true; do
        read -p "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π TELEGRAM_BOT_TOKEN: " TELEGRAM_BOT_TOKEN
        read -p "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π CHAT_ID: " CHAT_ID
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–¥–∞—î—Ç—å—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if test_telegram; then
            break
        else
            echo "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ."
        fi
    done
else
    TELEGRAM_BOT_TOKEN=""
    CHAT_ID=""
fi

# –ó–∞–ø–∏—Ç –Ω–∞ –≤–∫–ª—é—á–µ–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
read -p "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–ª—é—á–∞—Ç–∏ IP –∞–¥—Ä–µ—Å—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö (Y/N)? " include_ip

# –ó–∞–ø–∏—Ç –Ω–∞ —á–∞—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö)
read -p "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ (—Ö–≤–∏–ª–∏–Ω–∏, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 15): " timer_interval
timer_interval=${timer_interval:-15}  # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 15 —Ö–≤–∏–ª–∏–Ω

# –®–ª—è—Ö –¥–æ Python-—Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_PATH="/root/check_shardeum_status.py"
LOG_PATH="/root/shardeum_monitor.log"  # –®–ª—è—Ö –¥–æ –ª–æ–≥-—Ñ–∞–π–ª—É –≤ –¥–æ–º–∞—à–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

# –°—Ç–≤–æ—Ä—é—î–º–æ Python-—Å–∫—Ä–∏–ø—Ç
cat << EOF > "$SCRIPT_PATH"
import subprocess
import pytz
from datetime import datetime
import requests
import os
import socket

TELEGRAM_BOT_TOKEN = "$TELEGRAM_BOT_TOKEN"
CHAT_ID = "$CHAT_ID"
LOG_PATH = "$LOG_PATH"
INCLUDE_IP = "$include_ip" == "Y"

# –û—Ç—Ä–∏–º—É—î–º–æ hostname —ñ IP –∞–¥—Ä–µ—Å–∏
HOSTNAME = socket.gethostname()
SERVER_IP = subprocess.getoutput("hostname -I | awk '{print \$1}'")

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
STATUSES = {
    "offline": "‚ùå offline",
    "waiting-for-network": "‚è≥ waiting-for-network",
    "standby": "üü¢ standby",
    "active": "üîµ active",
    "stopped": "‚ùå stopped"  
}

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
LAST_STATUS_FILE = "/tmp/shardeum_last_status.txt"

def load_last_status():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞—Ç—É—Å –∑ —Ñ–∞–π–ª—É."""
    if os.path.exists(LAST_STATUS_FILE):
        with open(LAST_STATUS_FILE, "r") as file:
            return file.read().strip()
    return None

def save_last_status(status):
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞—Ç—É—Å —É —Ñ–∞–π–ª."""
    with open(LAST_STATUS_FILE, "w") as file:
        file.write(status)

def log_status(status, prev_status=None):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É —á–∞—Å—É —Ç–∞ —Å—Ç–∞—Ç—É—Å—É –≤ –ª–æ–≥ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram."""
    timezone = pytz.timezone('Europe/Kiev')  # –ó–∞–¥–∞—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
    current_time = datetime.now(timezone).strftime('%Y-%m-%d %H:%M:%S')

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    status_mapping = {
        "offline": "‚ùå offline",
        "waiting-for-network": "‚è≥ waiting-for-network",
        "standby": "üü¢ standby",   # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å standby
        "active": "üîµ active",
        "stopped": "‚ùå stopped",
        "unknown": "‚ùì unknown"  # –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    }

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è hostname —Ç–∞ IP, —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–æ
    prefix = f"{HOSTNAME} {SERVER_IP} " if INCLUDE_IP else f"{HOSTNAME} "

    # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    message = ""

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞—Ç—É—Å
    if prev_status and prev_status in status_mapping:
        # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è, —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
        current_status_display = status_mapping.get(status, "‚ùì unknown")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–∞—Ç—É—Å, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        prev_status_display = status_mapping.get(prev_status, "‚ùì unknown")
        message = f"{prefix}State changed from {prev_status_display} to {current_status_display}"
    else:
        # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–∏–π –∞–±–æ –±–µ–∑ –∑–º—ñ–Ω–∏, —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        current_status_display = status_mapping.get(status, "‚ùì unknown")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–∞—Ç—É—Å, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        message = f"{prefix}{current_status_display}"

    # –ó–∞–ø–∏—Å —É –ª–æ–≥-—Ñ–∞–π–ª
    if not os.path.exists(LOG_PATH):
        open(LOG_PATH, 'w').close()

    with open(LOG_PATH, "a") as log_file:
        log_file.write(f"{current_time} {message}\n")

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if prev_status and prev_status in status_mapping:
        send_status_change_message(status, prev_status)
    else:
        send_default_message(status)

def send_status_change_message(current_status, previous_status):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —É Telegram."""
    if INCLUDE_IP:
        prefix = f"{HOSTNAME} {SERVER_IP} "
    else:
        prefix = f"{HOSTNAME} "

    message = f"{prefix}State changed from {STATUSES[previous_status]} to {STATUSES[current_status]}"
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": message
    }
    try:
        response = requests.post(url, data=data)
        if response.status_code != 200:
            log_status(f"Failed to send message: {response.text}")
    except Exception as e:
        log_status(f"Error sending Telegram message: {e}")

def send_default_message(status):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram."""
    if INCLUDE_IP:
        prefix = f"{HOSTNAME} {SERVER_IP} "
    else:
        prefix = f"{HOSTNAME} "

    if status == "stopped":
        message = f"{prefix}Container is not running ‚ùå"
    elif status == "active":
        message = f"{prefix}Operator started ‚úÖ"
    elif status == "waiting-for-network":
        message = f"{prefix}State changed from ‚ùå offline to ‚è≥ waiting-for-network"
    elif status == "standby":
        message = f"{prefix}Container started üü¢"
    else:
        message = f"{prefix}Unknown state: {status}"

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": message
    }
    try:
        response = requests.post(url, data=data)
        if response.status_code != 200:
            log_status(f"Failed to send message: {response.text}")
    except Exception as e:
        log_status(f"Error sending Telegram message: {e}")

def is_container_running(container_name):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä."""
    try:
        result = subprocess.run(
            ["docker", "inspect", "-f", "{{.State.Running}}", container_name],
            capture_output=True,
            text=True
        )
        return result.stdout.strip() == "true"
    except subprocess.CalledProcessError as e:
        log_status(f"Error checking container status: {e}")
        return False

def start_container(container_name):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
    try:
        result = subprocess.run(
            ["docker", "start", container_name],
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            log_status(f"Container {container_name} started successfully!")
        else:
            log_status(f"Failed to start container: {result.stderr}")
    except subprocess.CalledProcessError as e:
        log_status(f"Error starting container: {e}")

def check_operator_status():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
    try:
        result = subprocess.run(
            ["docker", "exec", "shardeum-dashboard", "operator-cli", "status"],
            capture_output=True,
            text=True
        )
        output = result.stdout.strip()

        if result.returncode != 0:
            log_status(f"Error checking operator status: {result.stderr.strip()}")
            return "unknown"

        if "active" in output:  # –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
            return "active"
        elif "stopped" in output:
            return "stopped"
        else:
            log_status(f"Unexpected output from operator status: {output}")
            return "unknown"

    except Exception as e:
        log_status(f"Exception during operator status check: {str(e)}")
        return "unknown"


def check_status_and_restart_operator():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –π–æ–≥–æ –∑–∞–ø—É—Å–∫—É, —è–∫—â–æ –≤—ñ–Ω –∑—É–ø–∏–Ω–µ–Ω–∏–π."""
    output = check_operator_status()
    
    previous_status = load_last_status()

    for line in output.splitlines():
        if "state" in line:
            current_status = line.split(":", 1)[1].strip()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å
            
            # –ó–º—ñ–Ω—é—î–º–æ –ª–æ–≥—ñ–∫—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if current_status == "stopped":
                log_status("stopped")
                log_status("Starting the operator...", previous_status)
                restart_operator()
                return False
            elif current_status == "active":
                log_status("active", previous_status)
            elif current_status == "standby":
                log_status("standby", previous_status)  # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–ª—è standby
            else:
                log_status("unknown")  # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π, –≤–≤–∞–∂–∞—î–º–æ –π–æ–≥–æ –Ω–µ–≤—ñ–¥–æ–º–∏–º

    # –î–æ–¥–∞—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    time.sleep(10)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 10 —Å–µ–∫—É–Ω–¥

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if is_container_running("shardeum-dashboard"):
        log_status("Container is running üü¢")
    else:
        log_status("Container is not running ‚ùå")
        start_container("shardeum-dashboard")

    gui_status_result = subprocess.run(
        ["docker", "exec", "shardeum-dashboard", "operator-cli", "gui", "status"],
        capture_output=True,
        text=True
    )
    gui_output = gui_status_result.stdout
    if "operator gui not running!" in gui_output:
        log_status("GUI is not running, starting the GUI...")
        start_gui()

    return True


def restart_operator():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
    try:
        result = subprocess.run(
            ["docker", "exec", "shardeum-dashboard", "operator-cli", "start"],
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            log_status("Operator started successfully!")
        else:
            log_status(f"Failed to start the operator: {result.stderr}")
    except subprocess.CalledProcessError as e:
        log_status(f"Error executing start command: {e}")

def start_gui():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É GUI."""
    try:
        gui_result = subprocess.run(
            ["docker", "exec", "shardeum-dashboard", "operator-cli", "gui", "start"],
            capture_output=True,
            text=True
        )
        if gui_result.returncode == 0:
            log_status("GUI started successfully!")
        else:
            log_status(f"Failed to start GUI: {gui_result.stderr}")
    except subprocess.CalledProcessError as e:
        log_status(f"Error starting GUI: {e}")

if __name__ == "__main__":
    if not is_container_running("shardeum-dashboard"):
        log_status("Container 'shardeum-dashboard' is not running, starting the container...")
        start_container("shardeum-dashboard")

    check_status_and_restart_operator()
EOF

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–π–º–µ—Ä systemd
TIMER_PATH="/etc/systemd/system/shardeum_monitor.timer"
cat << EOF > "$TIMER_PATH"
[Unit]
Description=Shardeum Monitor Timer

[Timer]
OnBootSec=10min
OnUnitActiveSec=${timer_interval}min
Unit=shardeum_monitor.service

[Install]
WantedBy=timers.target
EOF

# –°—Ç–≤–æ—Ä—é—î–º–æ systemd-—Å–µ—Ä–≤—ñ—Å
SERVICE_PATH="/etc/systemd/system/shardeum_monitor.service"
cat << EOF > "$SERVICE_PATH"
[Unit]
Description=Shardeum Monitor Service

[Service]
Type=simple
ExecStart=/usr/bin/python3 "$SCRIPT_PATH"
EOF

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ systemd –¥–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
systemctl daemon-reload
systemctl enable shardeum_monitor.timer
systemctl start shardeum_monitor.timer

echo "–°–∫—Ä–∏–ø—Ç —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —ñ –∑–∞–ø—É—â–µ–Ω–∏–π v1.1!"
